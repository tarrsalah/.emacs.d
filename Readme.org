* My emacs configurations
** Table of contents							:TOC_3:
 - [[#my-emacs-configurations][My emacs configurations]]
     - [[#misc-settings][Misc settings]]
     - [[#kill-buffer-and-its-windows][Kill buffer and its windows]]
     - [[#backup-files][Backup files]]
     - [[#package-archives-and-emacs-initialization][Package archives and emacs initialization]]
     - [[#theme][Theme]]
     - [[#key-bindings][Key Bindings]]
     - [[#alias][Alias]]
     - [[#markdown][Markdown]]
     - [[#magit][Magit]]
     - [[#ido][ido]]
     - [[#projectile][projectile]]
     - [[#expand-region][expand-region]]
     - [[#autocomplete][Autocomplete]]
     - [[#flycheck][Flycheck]]
     - [[#org-mode][org-mode]]
     - [[#programming-language-specific][Programming language-specific]]
         - [[#javascript][javascript]]
     - [[#on-exit][On exit]]

** Misc settings
Turn on debugging when entering to the main =init.el= file (to turn
off at the end).

#+BEGIN_SRC emacs-lisp
(setq debug-on-error t)
(setq debug-on-quit t)
#+END_SRC

Disable the emacs menubar, toolbar and scrollbar.

#+BEGIN_SRC emacs-lisp
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)
#+END_SRC

Enable show paren mode.

#+BEGIN_SRC emacs-lisp
(show-paren-mode 1)
#+END_SRC

Replace the active region just by typing text.

#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

Highlight the current line.
#+BEGIN_SRC emacs-lisp
(global-hl-line-mode 1)
#+END_SRC

Change "yes or no" to "y or n"
#+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

Empty scratch buffer
#+BEGIN_SRC emacs-lisp
(setq initial-scratch-message ""
	 inhibit-startup-message t)
#+END_SRC

Enable =erase-buffer=
#+BEGIN_SRC emacs-lisp
(put 'erase-buffer 'disabled nil)
#+END_SRC

** Kill buffer and its windows
From this  [[%20http://www.emacswiki.org/emacs/misc-cmds.el][misc-cmds.el]]
#+BEGIN_SRC
(defun kill-buffer-and-its-windows (buffer)
  "Kill BUFFER and delete its windows.  Default is `current-buffer'.
BUFFER may be either a buffer or its name (a string)."
  (interactive (list (read-buffer "Kill buffer: " (current-buffer) 'existing)))
  (setq buffer  (get-buffer buffer))
  (if (buffer-live-p buffer)            ; Kill live buffer only.
      (let ((wins  (get-buffer-window-list buffer nil t))) ; On all frames.
	(when (and (buffer-modified-p buffer)
		   (fboundp '1on1-flash-ding-minibuffer-frame))
	  (1on1-flash-ding-minibuffer-frame t)) ; Defined in `oneonone.el'.
	(when (kill-buffer buffer)      ; Only delete windows if buffer killed.
	  (dolist (win  wins)           ; (User might keep buffer if modified.)
	    (when (window-live-p win)
	      ;; Ignore error, in particular,
	      ;; "Attempt to delete the sole visible or iconified frame".
	      (condition-case nil (delete-window win) (error nil))))))
    (when (interactive-p)
      (error "Cannot kill buffer.  Not a live buffer: `%s'" buffer))))

(substitute-key-definition 'kill-buffer 'kill-buffer-and-its-windows global-map)
#+END_SRC

** Backup files
This snippet is copied form [[http://www.emacswiki.org/emacs/BackupDirectory#toc1][emacswiki/BackupDirecory]].
#+BEGIN_SRC
(setq
  backup-by-copying t
  backup-directory-alist
   '(("." . "~/.saves"))
  delete-old-versions t
  kept-new-versions 6
  kept-old-versions 2
  version-control t)
#+END_SRC
** Package archives and emacs initialization
Initially, set the automatic package loading to true and require
the =package= feature.

#+BEGIN_SRC emacs-lisp
(setq package-enable-at-startup nil)
(require 'package)
#+END_SRC

Add [[http://melpa-stable.milkbox.net/packages/][melpa-stable]], [[http://melpa.milkbox.net/packages/][malpa]] and [[http://tromey.com/elpa/][elpa]] package sources.

#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives
		    '("melpa-stable" . "http://melpa-stable.milkbox.net/packages/"))
(add-to-list 'package-archives
		    '("melpa" . "http://melpa.milkbox.net/packages/"))
(add-to-list 'package-archives
		    '("elpa" . "http://tromey.com/elpa/"))
#+END_SRC

I use [[https://github.com/jwiegley/use-package][use-package]] for install and configure all my third-party
packages.

First, I add =use-package= to =my-packages= variable.

#+BEGIN_SRC emacs-lisp
(defvar my-packages
  '(use-package))
#+END_SRC

Install all of =my-packages= and require =use-package=.

#+BEGIN_SRC emacs-lisp
(dolist (p my-packages)
  (when (not (package-installed-p p))
  (package-install p)))

(require 'use-package)
#+END_SRC

** Theme
My preferred emacs theme is [[https://github.com/crafterm/twilight-emacs][twilight]] wich depends on the =color-theme=
package.

#+BEGIN_SRC emacs-lisp
(use-package color-theme
  :ensure t)
#+END_SRC

load the =color-theme-twilight.el= file and enable it.

#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")
(load-file "~/.emacs.d/themes/color-theme-twilight.el")
(color-theme-twilight)
#+END_SRC

** Key Bindings

| Key        | Command                       |
|------------+-------------------------------|
| =C-b=      | =switch-to-buffer=            |
| =C-x C-b=  | =ibuffer=                     |
| =C-x g=    | =magit-status=                |
| =C-<tab>=  | =other-window=                |
| =C-;=      | =comment-or-uncomment-region= |
| =<escape>= | =keyboard-quit= aka =C-g=     |
| =C-<menu>= | =menu-bar-open=               |
| =C-==      | =er/expand-region=            |
| =C-n=      | =company-complete=            |
| =C-x e=    | =erase-buffer=                |

** Alias

| Alias | Command              |
|-------+----------------------|
| =eb=  | =eval-buffer=        |
| =er=  | =eval-region=        |
| =erb= | =erase-buffer=       |
| =wc=  | =whitespace-cleanup= |
| =fc=  | =flycheck-mode=      |

** Markdown

#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :ensure t)
#+END_SRC

** Magit

#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t
  :bind (("C-x g". magit-status)))
#+END_SRC

** ido

#+BEGIN_SRC emacs-lisp
(setq my/ido-order '(".tex" ".go" ".clj" ".el" ".lisp" ".cl" ".ini" ".cfg" ".cnf"))
(use-package ido
  :init (ido-mode 1)
  :config
  (progn
	(setq ido-enable-flex-matching t
	  ido-everywhere t
	  ido-file-extensions-order my/ido-order))
  :bind (("C-x C-b" . ibuffer)
	 ("C-b" . switch-to-buffer)))
#+END_SRC

** projectile
I use [[https://github.com/grizzl/grizzl][grizzl]] as a completion option for projectile.

#+BEGIN_SRC emacs-lisp
(use-package grizzl
  :ensure t
  :config
  (custom-set-faces
   '(grizzl-selection-face ((t (:foreground "#8F9D6A")))))
#+END_SRC)

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (progn
    (projectile-global-mode)
    (setq projectile-completion-system 'grizzl)
    (setq projectile-enable-caching t)
    (add-to-list
    'projectile-globally-ignored-directories "node_modules")))
#+END_SRC

** expand-region
Use [[https://github.com/magnars/expand-region.el][expand-region]] to increase selected region by semantic units.

#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :ensure t
  :bind (("C-=" . er/expand-region)))
#+END_SRC

** Autocomplete
I use [[https://github.com/company-mode/company-mode][company]] for enabling auto-completion.

#+BEGIN_SRC
(use-package company
  :ensure t
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  :config
  (progn
    (setq company-tooltip-limit 10)
    (setq company-idle-delay .1)
    (setq company-echo-delay 0)
    (setq company-begin-commands '(self-insert-command)))
  :bind (("C-n" . company-complete)))
#+END_SRC

** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :ensure t)
#+END_SRC

** org-mode
Add [[https://github.com/snosov1/toc-org][toc-org]] to =org-mode=.
#+BEGIN_SRC emacs-lisp
(use-package toc-org
  :ensure t
  :config
  (add-hook 'org-mode-hook 'toc-org-enable))
#+END_SRC
** Programming language-specific
*** javascript
** On exit
Turn off debugging

#+BEGIN_SRC emacs-lisp
(setq debug-on-error nil)
(setq debug-on-quit nil)
#+END_SRC
